{"version":3,"sources":["logo.svg","Service.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Service","props","Accordion","defaultActiveKey","Item","eventKey","Header","desc","Body","stato","App","useState","services","setServices","useEffect","fetch","then","response","json","data","_container","className","Navbar","bg","variant","Container","Brand","href","alt","src","logo","width","height","map","service","index","descrizione","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","pushManager","getSubscription","subscription"],"mappings":"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","file":"static/js/main.11392078.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\r\nimport Accordion from 'react-bootstrap/Accordion'\r\n\r\nfunction Service(props) {\r\n\r\nreturn (\r\n    <Accordion defaultActiveKey=\"1\">\r\n    <Accordion.Item eventKey=\"0\">\r\n        <Accordion.Header>{props.desc}</Accordion.Header>\r\n        <Accordion.Body>{props.stato}\r\n        </Accordion.Body>\r\n    </Accordion.Item>\r\n    </Accordion>\r\n)\r\n\r\n}\r\n\r\nexport default Service;","import React from 'react';\nimport { useState, useEffect } from \"react\"\nimport logo from './logo.svg';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Container'\nimport Service from './Service.js'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\n\tconst [services, setServices] = useState([]);\n\n    useEffect(() => {\n        fetch('https://check.patente.it/vpnstatus?json')\n        .then(response => response.json())\n        .then(data => setServices(data._container[0]._container))\n      },[])\n\n\n  return (\n    <div className=\"App\">\n\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{' '}\n          Sida Watch\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      {services.map((service, index) => (\n        <Service desc={service.descrizione} stato={service.stato}/>\n        ))}\n\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (/*process.env.NODE_ENV === 'production' &&*/ 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  debugger;\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nconst applicationServerPublicKey = 'BEk5u1WX0qY6YPjAOovCdH-SaclDHgu115tKgVgf8LWufeixl2iWkJBZf3hnCJJmO4XjVcyOVBCfiVEp036kImw';\nvar swRegistration;\n\nfunction initializeUI() {\n  // Set the initial subscription value\n  //serviceWorkerRegistration.getSubscription()\n  swRegistration.pushManager.getSubscription()\n  .then(function(subscription) {\n    const isSubscribed = !(subscription === null);\n\n    if (isSubscribed) {\n      console.log('User IS subscribed.');\n    } else {\n      console.log('User is NOT subscribed.');\n    }\n\n  });\n}\n\n//https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n//https://developers.google.com/web/fundamentals/codelabs/push-notifications#subscribe_the_user\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n\n\nserviceWorkerRegistration.register({ onSuccess: (registration) => {console.log(registration); swRegistration=registration; initializeUI()} });\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}